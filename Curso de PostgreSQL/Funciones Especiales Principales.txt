           Funciones Especiales Principales
           
    ON CONFLICT DO
Esta instruccion nos permite especificar que debemos hacer en caso de un conflicto.

    Ejemplo: Imaginamos que realizamos una consulta donde el id ya ha sido utilizado. Podemos especificar que en ese caso, actualize los datos.

INSERT INTO public.estaciones(
	id_estaciones, nombre, direccion)
	VALUES ('1', 'Estación Centro_1', 'St 1#24')
	ON CONFLICT (id_estaciones) DO UPDATE SET nombre= 'Estación Centro_1', direccion= 'St 1#24';
    
    RETURNING
Returning nos devuelve una consulta select de los campos sobre los que ha tenido efecto la instruccion.

    Ejemplo: Queremos saber cual es el id que le fue asignado a un dato insertado.

INSERT INTO public.estaciones(
	nombre, direccion)
	VALUES ('Station One', 'Street Patagonia')

RETURNING *;

/*
Opcionalmente tambien puedes solicitar todos los campos o alguno de ellos
*/

INSERT INTO trenes (modelo, capacidad)
	 VALUES('modelo x', 100)
	 RETURNING id_tren;

INSERT INTO trenes (modelo, capacidad)
	 VALUES('modelo x', 100)
	 RETURNING id_tren, capacidad;


    Like / Ilike
Las funciones like y ilike sirven para crear consultas a base de expresiones regulares.

Like considera mayusculas y minusculas, mientras que ilike solo considera las letras.

    Ejemplo: Busquemos a los pasajeros con nombre que terminen con la letra o

-- Usando LIKE
SELECT * FROM PASAJERO
WHERE pasajero.nombre LIKE '%O'
-- No devulve nada, porque ningun nombre terminara con una letra mayuscula


-- Usando ILIKE
SELECT * FROM PASAJERO
WHERE pasajero.nombre LIKE '%O'
-- Devolvera los nombres que terminen con o, independiente si es mayuscula o minuscula.


    IS / IS NOT
Permite hacer comprobacion de valores especiales como null

    Ejemplo: Consultemos a todos los usuarios que tengan como direccion_residencia NULL

-- IS
SELECT * FROM PASAJERO
WHERE pasajero.nombre IS null;
Ahora a los que si tengan la direccion_recidencia con algun valor

-- IS NOT
SELECT * FROM PASAJERO
WHERE pasajero.nombre IS NOT null;